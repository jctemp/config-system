#!/usr/bin/env bash

set -euo pipefail

# Constants
readonly COLOR_RESET="\033[0m"
readonly RED_BG="\033[41m"
readonly BLUE_BG="\033[44m"
readonly GREEN_BG="\033[42m"

readonly REQUIRED_COMMANDS=(parted zpool zfs git nixos-generate-config nixos-install)
readonly ZFS_POOL="rpool"
readonly ZFS_LOCAL="${ZFS_POOL}/local"
readonly ZFS_SAFE="${ZFS_POOL}/safe"
readonly DATASETS=(
    "${ZFS_LOCAL}/root"
    "${ZFS_LOCAL}/nix"
    "${ZFS_SAFE}/home"
    "${ZFS_SAFE}/persist"
)

# Functions
log() {
    local -r level="$1"
    local -r message="$2"
    local bg_color

    case "$level" in
        "ERROR") bg_color="$RED_BG" ;;
        "INFO") bg_color="$BLUE_BG" ;;
        "SUCCESS") bg_color="$GREEN_BG" ;;
        *) bg_color="$COLOR_RESET" ;;
    esac

    echo -e "${bg_color}[${level}] ${message}${COLOR_RESET}"
}

error() {
    log "ERROR" "$1"
    exit 1
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
    fi
}

check_dependencies() {
    for cmd in "${REQUIRED_COMMANDS[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            error "Required command not found: $cmd"
        fi
    done
}

parse_arguments() {
    if [[ $# -lt 3 || $# -gt 4 ]]; then
        error "Usage: $0 <DISK_PATH> <HOST> <REMOTE> [INSTALL_ONLY]"
    fi

    DISK_PATH="$1"
    HOST="$2"
    REMOTE="$3"
    INSTALL_ONLY=${4:-false}

    if [[ ! -b "$DISK_PATH" && "$INSTALL_ONLY" != "true" ]]; then
        error "Invalid disk path: $DISK_PATH"
    fi

    if [[ -z "$HOST" ]]; then
        error "Host name cannot be empty"
    fi

    if [[ -z "$REMOTE" ]]; then
        error "Remote repository cannot be empty"
    fi
}

partition_disk() {
    log "INFO" "Partitioning disk $DISK_PATH..."
    
    # Securely erase the disk
    blkdiscard -f "$DISK_PATH" || log "WARN" "blkdiscard failed, continuing anyway"

    parted --script --align=optimal "$DISK_PATH" -- \
        mklabel gpt \
        mkpart EFI 1MiB 4GiB \
        mkpart rpool 4GiB -32GiB \
        set 1 esp on

    partprobe "$DISK_PATH"
    sleep 2

    # Determine partition names
    if [[ "$DISK_PATH" == /dev/sd* ]]; then
        BOOT="${DISK_PATH}1"
        ZFS="${DISK_PATH}2"
    else
        BOOT="${DISK_PATH}p1"
        ZFS="${DISK_PATH}p2"
    fi
}

create_filesystems() {
    log "INFO" "Creating filesystems..."

    # Format boot partition
    mkfs.vfat -n boot "$BOOT"

    # Create ZFS pool
    zpool create -f \
        -o ashift=12 \
        -o autotrim=on \
        -O acltype=posixacl \
        -O canmount=off \
        -O compression=zstd \
        -O dnodesize=auto \
        -O normalization=formD \
        -O relatime=on \
        -O xattr=sa \
        -O mountpoint=none \
        "$ZFS_POOL" "$ZFS"

    # Create ZFS datasets
    for ds in "${DATASETS[@]}"; do
        zfs create -o mountpoint=legacy "$ds"
    done

    # Create a blank snapshot of the root dataset
    zfs snapshot "${ZFS_LOCAL}/root@blank"
}

mount_filesystems() {
    log "INFO" "Mounting filesystems..."

    mount -t zfs "${ZFS_LOCAL}/root" /mnt
    mkdir -p /mnt/{boot,nix,home,persist}
    mount -t vfat "$BOOT" /mnt/boot
    mount -t zfs "${ZFS_LOCAL}/nix" /mnt/nix
    mount -t zfs "${ZFS_SAFE}/home" /mnt/home
    mount -t zfs "${ZFS_SAFE}/persist" /mnt/persist
}

setup_persistence() {
    log "INFO" "Setting up persistent directories..."

    mkdir -p /mnt/persist/etc/{nixos,NetworkManager/system-connections,ssh}
    mkdir -p /mnt/persist/var/lib/bluetooth
}

clone_nixos_config() {
    log "INFO" "Cloning NixOS configuration..."

    git clone "$REMOTE" /mnt/persist/etc/nixos
}

generate_hardware_config() {
    log "INFO" "Generating hardware configuration..."

    local -r config_dir="/mnt/persist/etc/nixos/machines/${HOST}"
    local -r config_file="${config_dir}/hardware-configuration.nix"

    if [[ ! -d $config_dir ]]; then
        error "$HOST is not part of the configuration."
    fi    

    nixos-generate-config --root /mnt --show-hardware-config > "$config_file"
}

install_nixos() {
    log "INFO" "Installing NixOS..."

    nixos-install --root /mnt \
        --no-root-passwd \
        --flake "/mnt/persist/etc/nixos#${HOST}"
}

main() {
    check_root
    check_dependencies
    parse_arguments "$@"

    if [[ ! $INSTALL_ONLY ]]; then
        partition_disk
        create_filesystems
        mount_filesystems
        setup_persistence
        clone_nixos_config
        generate_hardware_config
    fi
    install_nixos

    log "SUCCESS" "NixOS installation completed successfully!"
}

main "$@"